name: Build and deploy Application

on:
  push:
    branches:
      - prod
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"

      - name: Check if composer.json exists
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "./composer.json"

      - name: Run composer install if composer.json exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: composer validate --no-check-publish && composer install --prefer-dist --no-progress

      - name: Use Node.js 18 (to build frontend)
        uses: actions/setup-node@v2
        with:
          node-version: "18"
      - name: Build Frontend
        run: |
          npm ci
          npm run build

      - name: Zip artifact for deployment
        run: |
          zip release.zip ./* -r -x "README.md" ".dockerignore" "**/.gitignore" ".env.example" ".gitattributes" "docker-compose.yml" "Dockerfile" ".editorconfig" "./tests/**" "phpunit.dusk.xml" "phpunit.xml" "tailwind.config.js" "package.json" "package-lock.json" "vite.config.js" "postcss.config.js" "./node_modules/**"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: php-app
          path: release.zip

  transfer:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: php-app

      - name: Unzip artifact for deployment
        run: |
          mkdir "${{ secrets.PROJECT_NAME }}"
          unzip release.zip -d "${{ secrets.PROJECT_NAME }}"
          rm release.zip

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Copy Build to Target Server
        run: |
          if echo ${{  github.event.act  }} | grep -c "true"
          then
            apt-get update -y && apt-get install -y rsync
          fi

          rsync -r -e "ssh -p ${{ secrets.SSH_PORT }}" "${{ github.workspace }}"/"${{ secrets.PROJECT_NAME }}"  "${{ secrets.SSH_USERNAME }}"@"${{ secrets.SSH_HOST }}":"${{ secrets.REMOTE_LARAVEL_PATH }}" --delete --filter="protect ${{ secrets.PROJECT_NAME }}/.env" --filter="protect ${{ secrets.PROJECT_NAME }}/storage/app/**/*"
  deploy:
    runs-on: ubuntu-latest
    needs: transfer

    steps:
      - name: Perform Deployment
        if: ${{ success() }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            # Create a symbolic link to the public_html folder
            source=$(realpath "${{ secrets.REMOTE_LARAVEL_PATH }}")/"${{ secrets.PROJECT_NAME }}"/public
            target="${{ secrets.REMOTE_TARGET }}"

            if [ "$(readlink $target)" != "$source" ]; then
              unlink $target || rm $target
              ln -sf "$source" "$target"
            fi

            # Go to the project folder and run the deployment script
            cd ${{ secrets.REMOTE_LARAVEL_PATH }}/${{ secrets.PROJECT_NAME }}
            php artisan down --refresh=15
            php artisan migrate --force
            php artisan cache:clear
            php artisan route:clear
            php artisan config:clear
            php artisan view:clear
            php artisan cache:clear
            php artisan route:cache
            php artisan config:cache
            php artisan icons:cache
            php artisan storage:link
            php artisan up
